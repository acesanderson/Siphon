"""
A SiphonQuery class to handle siphon queries.

This provides a universal interface for querying a ProcessedCorpus object, whether it's the entire library, a subset, a created-on-the-fly corpus (from a directory, fex.), etc.

This module is part of the Siphon project, which is designed to manage and process content from various sources.

This embraces the monad pattern, meaning you can daisy chain methods together to create complex queries, for example:
SiphonQuery().last().filter_by_date("2023-01-01").filter_by_source("example_source"). This is achieved by returning a new SiphonQuery instance with the updated parameters at each step.

A bare SiphonQuery() instance will return the entire corpus, which is the same as SiphonQuery().all().

SiphonQueries are able to access metadata, content, and other attrs in a SQL-like manner, but also have access to vector database queries for semantic search, graph queries for GraphRAG, and synthetic/AI-generated tagging/summarization access. These are generated by the ProcessedCorpus objects, but in a lazy manner -- i.e. when initiated by a specific SiphonQuery method. Example:
class SiphonQuery:
    def semantic_search(self, query: str, k: int = 10) -> 'SiphonQuery':
        # This triggers vector DB creation if it doesn't exist
        if not self.corpus.has_vector_index():
            self.corpus._create_vector_index()  # Happens here, not at init
        # Then do the search
        return self._add_operation('semantic_search', query, k)
"""

from Siphon.data.ProcessedContent import ProcessedContent
from Siphon.logs.logging_config import get_logger
from Siphon.data.types.SourceType import SourceType
from Siphon.collections.corpus.siphon_corpus import (
    SiphonCorpus,
    InMemoryCorpus,
)

logger = get_logger(__name__)


class SiphonQuery:
    """
    Monadic query interface for fluent corpus operations
    """

    def __init__(self, corpus: SiphonCorpus):
        self.corpus: SiphonCorpus = corpus

    # ========================================================================
    # Monadic operations return new SiphonQuery instances
    # ========================================================================

    # Filtering Operations (return new SiphonQuery)

    def filter_by_source_type(self, source_type: SourceType) -> "SiphonQuery": ...

    def filter_by_date_range(self, start_date, end_date) -> "SiphonQuery": ...

    def filter_by_tags(self, tags: list[str]) -> "SiphonQuery": ...

    def filter_by_content(self, search_term: str) -> "SiphonQuery": ...

    def filter_by_title(self, title_pattern: str) -> "SiphonQuery": ...

    # Ordering & Limiting (return new SiphonQuery)

    def order_by_date(self, ascending: bool = True) -> "SiphonQuery": ...

    def order_by_title(self, ascending: bool = True) -> "SiphonQuery": ...

    def limit(self, n: int) -> "SiphonQuery": ...

    def offset(self, n: int) -> "SiphonQuery": ...

    def paginate(self, page_size: int, page_number: int) -> "SiphonQuery": ...

    # Advanced Queries (return new SiphonQuery)

    def semantic_search(self, query: str, k: int = 10) -> "SiphonQuery": ...

    def similar_to(self, content: ProcessedContent, k: int = 10) -> "SiphonQuery": ...

    def graph_traverse(
        self, start_content: ProcessedContent, depth: int = 2
    ) -> "SiphonQuery": ...

    # Aggregation Operations (return new SiphonQuery)

    def group_by_source_type(self) -> "SiphonQuery": ...

    def group_by_date(self, granularity: str = "day") -> "SiphonQuery": ...

    # ========================================================================
    # Terminal Operations (return non-SiphonQuery results)
    # ========================================================================

    def to_list(self) -> list[ProcessedContent]: ...

    def to_corpus(self) -> InMemoryCorpus: ...

    def to_sourdough(self, **kwargs) -> "Sourdough": ...

    def to_dataframe(self): ...

    def first(self) -> ProcessedContent | None: ...

    def last(self) -> ProcessedContent | None: ...

    def count(self) -> int: ...

    def exists(self) -> bool: ...

    # ========================================================================
    # View & Utility Methods
    # ========================================================================

    def snapshot(self) -> str:
        """Get a snapshot summary of the current query state"""
        return self.corpus.snapshot()
