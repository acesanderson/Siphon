"""
A SiphonQuery class to handle siphon queries.

This provides a universal interface for querying a ProcessedCorpus object, whether it's the entire library, a subset, a created-on-the-fly corpus (from a directory, fex.), etc.

This module is part of the Siphon project, which is designed to manage and process content from various sources.

This embraces the monad pattern, meaning you can daisy chain methods together to create complex queries, for example:
SiphonQuery().last().filter_by_date("2023-01-01").filter_by_source("example_source"). This is achieved by returning a new SiphonQuery instance with the updated parameters at each step.

A bare SiphonQuery() instance will return the entire corpus, which is the same as SiphonQuery().all().

SiphonQueries are able to access metadata, content, and other attrs in a SQL-like manner, but also have access to vector database queries for semantic search, graph queries for GraphRAG, and synthetic/AI-generated tagging/summarization access. These are generated by the ProcessedCorpus objects, but in a lazy manner -- i.e. when initiated by a specific SiphonQuery method. Example:
class SiphonQuery:
    def semantic_search(self, query: str, k: int = 10) -> 'SiphonQuery':
        # This triggers vector DB creation if it doesn't exist
        if not self.corpus.has_vector_index():
            self.corpus._create_vector_index()  # Happens here, not at init
        # Then do the search
        return self._add_operation('semantic_search', query, k)
"""

from Siphon.database.postgres.PGRES_connection import get_db_connection
from Siphon.data.ProcessedContent import ProcessedContent
from Siphon.logs.logging_config import get_logger
from psycopg2.extras import RealDictCursor

logger = get_logger(__name__)


class SiphonQuery:
    """
    A class to handle siphon queries.
    """

    def __init__(self, corpus: ProcessedCorpus):
        """
        Initializes the SiphonQuery instance.
        Has our own get_db_connection function as a default parameter.
        """
        self.corpus = corpus

    def last(self) -> ProcessedContent | None:
        """
        Queries the latest processed content from the corpus.
        Returns a ProcessedContent instance or None if no content is found.
        """


if __name__ == "__main__":
    sq = SiphonQuery()
    last = sq.last()
    print(last)
